---
title: "SDS 291 Final Project Report"
author: "Miya Dang, Mia Tran, Alua Birgebayeva"
date: "Monday, April 28, 2025"
format: 
  pdf:
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
         \DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\{\}}
    geometry: 
      - left=1in
      - right=1in
      - top=1in
      - bottom=1in
editor_options: 
  chunk_output_type: inline
---
# Abstract

# Introduction

# Methods

## Exploratory Data Analysis

```{r, echo = FALSE, warning = FALSE, message = FALSE}
# Loading necessary packages
library(gtsummary)
library(ggplot2)
library(tidyr)
library(pROC)
library(car)
library(dplyr)
library(broom)

# Reading csv
heart_data <- read.csv("heart_failure_clinical_records_dataset.csv")

# Factoring categorical variables
heart_data$anaemia <- factor(heart_data$anaemia)
heart_data$diabetes <- factor(heart_data$diabetes)
heart_data$high_blood_pressure <- factor(heart_data$high_blood_pressure)
heart_data$sex <- factor(heart_data$sex)
heart_data$smoking <- factor(heart_data$smoking)
heart_data$DEATH_EVENT <- factor(heart_data$DEATH_EVENT)

# EDA summary table
tbl_summary(heart_data)
```

Boxplots for Ejection Fraction and Serum Creatinine by Death Event
```{r, echo = FALSE, warning = FALSE, message = FALSE}

# Reshape data to long format
heart_data_long <- heart_data %>%
  pivot_longer(
    cols = c(ejection_fraction, serum_creatinine),
    names_to = "variable",
    values_to = "value"
  )

# Create labels for faceting
variable_labels <- c(
  "ejection_fraction" = "Ejection Fraction (%)",
  "serum_creatinine" = "Serum Creatinine (mg/dL)"
)

# Create combined plot
ggplot(heart_data_long, aes(x = factor(DEATH_EVENT), y = value)) +
  geom_boxplot() +
  facet_wrap(~ variable, scales = "free_y") +
  labs(x = "Death Event (0 = Alive, 1 = Dead)",
       title = "Ejection Fraction and Serum Creatinine by Death Event"
  )
```


## Select Variables

```{r, echo = FALSE, warning = FALSE, message = FALSE}
# Selecting models by doing backward elimination using nested F test (p-value = 0.1)

heart_full <- glm(DEATH_EVENT ~ age + anaemia + creatinine_phosphokinase + diabetes + ejection_fraction + high_blood_pressure + platelets + serum_creatinine + serum_sodium + sex + smoking + time, data = heart_data, family = "binomial")

# drop1(heart_full, test = "F")
drop1_heart <- update(heart_full, . ~ . - anaemia)
# drop1(drop1_heart, test = "F")
drop1_heart <- update(drop1_heart, . ~ . - smoking)
# drop1(drop1_heart, test = "F")
drop1_heart <- update(drop1_heart, . ~ . - high_blood_pressure)
# drop1(drop1_heart, test = "F")
drop1_heart <- update(drop1_heart, . ~ . - diabetes)
#  drop1(drop1_heart, test = "F")
drop1_heart <- update(drop1_heart, . ~ . - platelets)
#  drop1(drop1_heart, test = "F")
drop1_heart <- update(drop1_heart, . ~ . - creatinine_phosphokinase)
# drop1(drop1_heart, test = "F")
drop1_heart <- update(drop1_heart, . ~ . - sex)
# drop1(drop1_heart, test = "F")

# Final model after moving variables
final_model <- drop1_heart
summary(final_model)
```

## Model diagnostics

```{r}
# Model diagnostics

# Leverage
case_influence <- final_model |> augment()
case_influence <- case_influence |> mutate(row_id = row_number())

# Calculating the threshold for unusually high leverage
k_plus_one <- length(coef(final_model))
n <- nrow(heart_data)

# Filtering the data to determine which observations have unusually high leverage
leverage_index <- case_influence |> filter(.hat > 2 * k_plus_one/n) |> select(row_id) |> pull()
heart_data[leverage_index, ]

case_influence |> ggplot(aes(x = row_id, y = .hat)) + geom_point() + 
  geom_hline(yintercept = 2*k_plus_one/n, col = "red") +
  xlab("") + ylab("Leverage")

# Studentized residuals
case_influence <- case_influence |> mutate(.stu.resid = rstudent(final_model))
stu_resid_id <- case_influence |> filter(.stu.resid < -2 | .stu.resid > 2) |> select(row_id) |> pull()
heart_data[stu_resid_id, ]

# Plotting the studentized residuals against the observation row numbers
case_influence |>
  ggplot(aes(x = row_id, y = .stu.resid)) + geom_point() + 
  geom_hline(yintercept = -2, col = "red") +
  geom_hline(yintercept = 2, col = "red") +
  xlab("Row ID") + ylab("Studentized Residual")

# Determining which observations have unusually large studentized residuals
stu_resid_id <- case_influence |>
  filter(.stu.resid < -2 | .stu.resid > 2) |>
  select(row_id) |>
  pull()

heart_data[stu_resid_id, ]

# Cook's distance
case_influence |> select(.cooksd)
case_influence |> filter(.cooksd > 0.05)
cooksd_id <- case_influence |> filter(.cooksd > 0.05) |> select(row_id) |> pull()
heart_data[cooksd_id, ]

# Plotting the Cook's distances against the observation row numbers
case_influence |>
  ggplot(aes(x = row_id, y = .cooksd)) +
  geom_point() + 
  geom_hline(yintercept = 0.05, col = "red") +
  xlab("Row ID") + ylab("Cook's Distance")

# Define the row indices of the influential observations
influential_rows <- c(132, 218, 229)

# Remove these rows from the heart_data dataset
heart_data_clean <- heart_data[-influential_rows, ]

# Refit the logistic regression model on the cleaned data
final_model_clean <- glm(DEATH_EVENT ~ age + anaemia + creatinine_phosphokinase + diabetes + ejection_fraction + high_blood_pressure + platelets + serum_creatinine + serum_sodium + sex + smoking + time, data = heart_data_clean, family = "binomial")

# Summarize the new model
summary(final_model_clean)


# Checking conditions using Deviance residual plot
plot(residuals(final_model, type = "deviance"), ylab = "Deviance Residuals")

# Multicollinearity
vif(final_model)

```

## Model performance

```{r, echo = FALSE, warning = FALSE, message = FALSE}
new_data <- read.csv("heart_failure_clinical_records_dataset.csv")
new_data$anaemia <- factor(new_data$anaemia)
new_data$diabetes <- factor(new_data$diabetes)
new_data$high_blood_pressure <- factor(new_data$high_blood_pressure)
new_data$sex <- factor(new_data$sex)
new_data$smoking <- factor(new_data$smoking)
new_data$DEATH_EVENT <- factor(new_data$DEATH_EVENT)

# Get predicted probabilities for new data
new_pred <- augment(final_model, newdata = new_data, type.predict = "response")

# Classify using 0.5 threshold
new_classify <- new_pred |>
  mutate(pred = ifelse(.fitted > 0.5, "Dead", "Alive"))

# Actual vs. Predicted table with margins
compare_table <- new_classify |>
  select(DEATH_EVENT, pred) |>
  table() |>
  addmargins()

# Calculate sensitivity, specificity, accuracy
sensitivity <- compare_table[2, 2] / compare_table[2, 3]
specificity <- compare_table[1, 1] / compare_table[1, 3]
accuracy <- (compare_table[1, 1] + compare_table[2, 2]) / compare_table[3, 3]

# Create ROC object
voting_roc <- roc(
  response = new_classify$DEATH_EVENT,
  predictor = new_classify$.fitted,
  quiet = TRUE
)

# Calculate AUC
auc_value <- auc(voting_roc)

# Results
cat("Sensitivity:", sensitivity, "\n")
cat("Specificity:", specificity, "\n")
cat("Accuracy:", accuracy, "\n")
cat("AUC:", auc_value, "\n")
```



